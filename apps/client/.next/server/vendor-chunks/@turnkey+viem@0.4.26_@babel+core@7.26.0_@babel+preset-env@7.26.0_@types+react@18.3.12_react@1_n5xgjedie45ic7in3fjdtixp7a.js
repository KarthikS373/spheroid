"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey+viem@0.4.26_@babel+core@7.26.0_@babel+preset-env@7.26.0_@types+react@18.3.12_react@1_n5xgjedie45ic7in3fjdtixp7a";
exports.ids = ["vendor-chunks/@turnkey+viem@0.4.26_@babel+core@7.26.0_@babel+preset-env@7.26.0_@types+react@18.3.12_react@1_n5xgjedie45ic7in3fjdtixp7a"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+viem@0.4.26_@babel+core@7.26.0_@babel+preset-env@7.26.0_@types+react@18.3.12_react@1_n5xgjedie45ic7in3fjdtixp7a/node_modules/@turnkey/viem/dist/index.mjs":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+viem@0.4.26_@babel+core@7.26.0_@babel+preset-env@7.26.0_@types+react@18.3.12_react@1_n5xgjedie45ic7in3fjdtixp7a/node_modules/@turnkey/viem/dist/index.mjs ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccount: () => (/* binding */ createAccount),\n/* harmony export */   createApiKeyAccount: () => (/* binding */ createApiKeyAccount),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   signTypedData: () => (/* binding */ signTypedData)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.21.45_typescript@5.6.3/node_modules/viem/_esm/utils/address/isAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.21.45_typescript@5.6.3/node_modules/viem/_esm/utils/transaction/serializeTransaction.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.21.45_typescript@5.6.3/node_modules/viem/_esm/utils/signature/hashMessage.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.21.45_typescript@5.6.3/node_modules/viem/_esm/utils/signature/hashTypedData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.21.45_typescript@5.6.3/node_modules/viem/_esm/utils/signature/serializeSignature.js\");\n/* harmony import */ var viem_accounts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem/accounts */ \"(ssr)/../../node_modules/.pnpm/viem@2.21.45_typescript@5.6.3/node_modules/viem/_esm/accounts/toAccount.js\");\n/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/http */ \"(ssr)/../../node_modules/.pnpm/@turnkey+http@2.12.2/node_modules/@turnkey/http/dist/index.mjs\");\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n\n\n\n\n\nasync function createAccount(input) {\n    const { client, organizationId, signWith } = input;\n    let { ethereumAddress } = input;\n    if (!signWith) {\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Missing signWith parameter`,\n        });\n    }\n    if ((0,viem__WEBPACK_IMPORTED_MODULE_2__.isAddress)(signWith)) {\n        // override provided `ethereumAddress`\n        ethereumAddress = signWith;\n    }\n    else if (!ethereumAddress) {\n        // we have a private key ID, but not an ethereumAddress\n        const data = await client.getPrivateKey({\n            privateKeyId: signWith,\n            organizationId: organizationId,\n        });\n        ethereumAddress = data.privateKey.addresses.find((item) => item.format === \"ADDRESS_FORMAT_ETHEREUM\")?.address;\n        if (typeof ethereumAddress !== \"string\" || !ethereumAddress) {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Unable to find Ethereum address for key ${signWith} under organization ${organizationId}`,\n            });\n        }\n    }\n    return (0,viem_accounts__WEBPACK_IMPORTED_MODULE_3__.toAccount)({\n        address: ethereumAddress,\n        signMessage: function ({ message, }) {\n            return signMessage(client, message, organizationId, signWith);\n        },\n        signTransaction: function (transaction, args) {\n            const serializer = !args?.serializer\n                ? viem__WEBPACK_IMPORTED_MODULE_4__.serializeTransaction\n                : args.serializer;\n            return signTransaction(client, transaction, serializer, organizationId, signWith);\n        },\n        signTypedData: function (typedData) {\n            return signTypedData(client, typedData, organizationId, signWith);\n        },\n    });\n}\n/**\n * Creates a new Custom Account backed by a Turnkey API key.\n * @deprecated use {@link createAccount} instead.\n */\nasync function createApiKeyAccount(config) {\n    const { apiPublicKey, apiPrivateKey, baseUrl, organizationId, privateKeyId } = config;\n    const stamper = new _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__.ApiKeyStamper({\n        apiPublicKey: apiPublicKey,\n        apiPrivateKey: apiPrivateKey,\n    });\n    const client = new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient({\n        baseUrl: baseUrl,\n    }, stamper);\n    const data = await client.getPrivateKey({\n        privateKeyId: privateKeyId,\n        organizationId: organizationId,\n    });\n    const ethereumAddress = data.privateKey.addresses.find((item) => item.format === \"ADDRESS_FORMAT_ETHEREUM\")?.address;\n    if (typeof ethereumAddress !== \"string\" || !ethereumAddress) {\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Unable to find Ethereum address for key ${privateKeyId} under organization ${organizationId}`,\n        });\n    }\n    return (0,viem_accounts__WEBPACK_IMPORTED_MODULE_3__.toAccount)({\n        address: ethereumAddress,\n        signMessage: function ({ message, }) {\n            return signMessage(client, message, organizationId, privateKeyId);\n        },\n        signTransaction: function (transaction, args) {\n            const serializer = !args?.serializer\n                ? viem__WEBPACK_IMPORTED_MODULE_4__.serializeTransaction\n                : args.serializer;\n            return signTransaction(client, transaction, serializer, organizationId, privateKeyId);\n        },\n        signTypedData: function (typedData) {\n            return signTypedData(client, typedData, organizationId, privateKeyId);\n        },\n    });\n}\nasync function signMessage(client, message, organizationId, signWith) {\n    const hashedMessage = (0,viem__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(message);\n    const signedMessage = await signMessageWithErrorWrapping(client, hashedMessage, organizationId, signWith);\n    return `${signedMessage}`;\n}\nasync function signTransaction(client, transaction, serializer, organizationId, signWith) {\n    const serializedTx = serializer(transaction);\n    const nonHexPrefixedSerializedTx = serializedTx.replace(/^0x/, \"\");\n    return await signTransactionWithErrorWrapping(client, nonHexPrefixedSerializedTx, organizationId, signWith);\n}\nasync function signTypedData(client, data, organizationId, signWith) {\n    const hashToSign = (0,viem__WEBPACK_IMPORTED_MODULE_6__.hashTypedData)(data);\n    return await signMessageWithErrorWrapping(client, hashToSign, organizationId, signWith);\n}\nasync function signTransactionWithErrorWrapping(client, unsignedTransaction, organizationId, signWith) {\n    let signedTx;\n    try {\n        signedTx = await signTransactionImpl(client, unsignedTransaction, organizationId, signWith);\n    }\n    catch (error) {\n        if (error instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError) {\n            throw error;\n        }\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Failed to sign transaction: ${error.message}`,\n            cause: error,\n        });\n    }\n    return `0x${signedTx}`;\n}\nasync function signTransactionImpl(client, unsignedTransaction, organizationId, signWith) {\n    if (client instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient) {\n        const { activity } = await client.signTransaction({\n            type: \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\",\n            organizationId: organizationId,\n            parameters: {\n                signWith,\n                type: \"TRANSACTION_TYPE_ETHEREUM\",\n                unsignedTransaction: unsignedTransaction,\n            },\n            timestampMs: String(Date.now()), // millisecond timestamp\n        });\n        const { id, status, type } = activity;\n        if (activity.status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Invalid activity status: ${activity.status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        return assertNonNull(activity?.result?.signTransactionResult?.signedTransaction);\n    }\n    else {\n        // Want to get additional activity details here\n        const activity = await client.signTransaction({\n            signWith,\n            type: \"TRANSACTION_TYPE_ETHEREUM\",\n            unsignedTransaction: unsignedTransaction,\n        });\n        return assertNonNull(activity?.signedTransaction);\n    }\n}\nasync function signMessageWithErrorWrapping(client, message, organizationId, signWith) {\n    let signedMessage;\n    try {\n        signedMessage = await signMessageImpl(client, message, organizationId, signWith);\n    }\n    catch (error) {\n        if (error instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError) {\n            throw error;\n        }\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Failed to sign: ${error.message}`,\n            cause: error,\n        });\n    }\n    return signedMessage;\n}\nasync function signMessageImpl(client, message, organizationId, signWith) {\n    let result;\n    if (client instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient) {\n        const { activity } = await client.signRawPayload({\n            type: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\",\n            organizationId: organizationId,\n            parameters: {\n                signWith,\n                payload: message,\n                encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n                hashFunction: \"HASH_FUNCTION_NO_OP\",\n            },\n            timestampMs: String(Date.now()), // millisecond timestamp\n        });\n        const { id, status, type } = activity;\n        if (status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Invalid activity status: ${activity.status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        result = assertNonNull(activity?.result?.signRawPayloadResult);\n    }\n    else {\n        // Want to get ID and status back as well in the result (we won't get an error)\n        // Maybe do a try/catch?\n        result = await client.signRawPayload({\n            signWith,\n            payload: message,\n            encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n            hashFunction: \"HASH_FUNCTION_NO_OP\",\n        });\n    }\n    let assembled = (0,viem__WEBPACK_IMPORTED_MODULE_7__.serializeSignature)({\n        r: `0x${result.r}`,\n        s: `0x${result.s}`,\n        v: result.v === \"00\" ? 27n : 28n,\n    });\n    // Assemble the hex\n    return assertNonNull(assembled);\n}\nfunction assertNonNull(input) {\n    if (input == null) {\n        throw new Error(`Got unexpected ${JSON.stringify(input)}`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+viem@0.4.26_@babel+core@7.26.0_@babel+preset-env@7.26.0_@types+react@18.3.12_react@1_n5xgjedie45ic7in3fjdtixp7a/node_modules/@turnkey/viem/dist/index.mjs\n");

/***/ })

};
;