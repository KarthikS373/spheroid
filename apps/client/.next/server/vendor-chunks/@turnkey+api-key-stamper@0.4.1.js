"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey+api-key-stamper@0.4.1";
exports.ids = ["vendor-chunks/@turnkey+api-key-stamper@0.4.1"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/index.mjs":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/index.mjs ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiKeyStamper: () => (/* binding */ ApiKeyStamper),\n/* harmony export */   pointDecode: () => (/* reexport safe */ _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_1__.pointDecode),\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// `window.document` ensures that we're in a browser context\n// and `crypto.subtle` ensures that it supports the web crypto APIs\n// Inspired by https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isCryptoEnabledBrowser = typeof window !== \"undefined\" &&\n    typeof window.document !== \"undefined\" &&\n    typeof crypto !== \"undefined\" &&\n    typeof crypto.subtle !== \"undefined\";\n// We check `process.versions.node`\n// Taken from https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isNode = typeof process !== \"undefined\" &&\n    process.versions != null &&\n    process.versions.node != null;\n/**\n * Signature function abstracting the differences between NodeJS and web environments for signing with API keys.\n */\nconst signWithApiKey = async (input) => {\n    if (isCryptoEnabledBrowser) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey+api-key-stamper@0.4.1\").then(__webpack_require__.bind(__webpack_require__, /*! ./webcrypto.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else if (isNode) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey+api-key-stamper@0.4.1\").then(__webpack_require__.bind(__webpack_require__, /*! ./nodecrypto.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else {\n        // If we don't have NodeJS or web crypto at our disposal, default to pure JS implementation\n        // This is the case for old browsers and react native environments\n        const fn = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@turnkey+api-key-stamper@0.4.1\"), __webpack_require__.e(\"vendor-chunks/@noble+curves@1.6.0\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./purejs.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n};\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass ApiKeyStamper {\n    constructor(config) {\n        this.apiPublicKey = config.apiPublicKey;\n        this.apiPrivateKey = config.apiPrivateKey;\n    }\n    async stamp(payload) {\n        const signature = await signWithApiKey({\n            publicKey: this.apiPublicKey,\n            privateKey: this.apiPrivateKey,\n            content: payload,\n        });\n        const stamp = {\n            publicKey: this.apiPublicKey,\n            scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n            signature: signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),\n        };\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTREO0FBQ0g7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMFJBQXlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw0UkFBMEI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw4VkFBc0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMEVBQXVCO0FBQ3JEO0FBQ0E7QUFDQTs7QUFFeUM7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac3BoZXJvaWQvY2xpZW50Ly4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHVybmtleSthcGkta2V5LXN0YW1wZXJAMC40LjEvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L2luZGV4Lm1qcz9jZGEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0cmluZ1RvQmFzZTY0dXJsU3RyaW5nIH0gZnJvbSAnQHR1cm5rZXkvZW5jb2RpbmcnO1xuZXhwb3J0IHsgcG9pbnREZWNvZGUgfSBmcm9tICcuL3RpbmsvZWxsaXB0aWNfY3VydmVzLm1qcyc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG4vLyBIZWFkZXIgbmFtZSBmb3IgYW4gQVBJIGtleSBzdGFtcFxuY29uc3Qgc3RhbXBIZWFkZXJOYW1lID0gXCJYLVN0YW1wXCI7XG4vLyBgd2luZG93LmRvY3VtZW50YCBlbnN1cmVzIHRoYXQgd2UncmUgaW4gYSBicm93c2VyIGNvbnRleHRcbi8vIGFuZCBgY3J5cHRvLnN1YnRsZWAgZW5zdXJlcyB0aGF0IGl0IHN1cHBvcnRzIHRoZSB3ZWIgY3J5cHRvIEFQSXNcbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9mbGV4ZGluZXNoL2Jyb3dzZXItb3Itbm9kZS9ibG9iL21hc3Rlci9zcmMvaW5kZXgudHNcbmNvbnN0IGlzQ3J5cHRvRW5hYmxlZEJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBjcnlwdG8gIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgY3J5cHRvLnN1YnRsZSAhPT0gXCJ1bmRlZmluZWRcIjtcbi8vIFdlIGNoZWNrIGBwcm9jZXNzLnZlcnNpb25zLm5vZGVgXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mbGV4ZGluZXNoL2Jyb3dzZXItb3Itbm9kZS9ibG9iL21hc3Rlci9zcmMvaW5kZXgudHNcbmNvbnN0IGlzTm9kZSA9IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgcHJvY2Vzcy52ZXJzaW9ucyAhPSBudWxsICYmXG4gICAgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9IG51bGw7XG4vKipcbiAqIFNpZ25hdHVyZSBmdW5jdGlvbiBhYnN0cmFjdGluZyB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBOb2RlSlMgYW5kIHdlYiBlbnZpcm9ubWVudHMgZm9yIHNpZ25pbmcgd2l0aCBBUEkga2V5cy5cbiAqL1xuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBpZiAoaXNDcnlwdG9FbmFibGVkQnJvd3Nlcikge1xuICAgICAgICBjb25zdCBmbiA9IGF3YWl0IGltcG9ydCgnLi93ZWJjcnlwdG8ubWpzJykudGhlbigobSkgPT4gbS5zaWduV2l0aEFwaUtleSk7XG4gICAgICAgIHJldHVybiBmbihpbnB1dCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTm9kZSkge1xuICAgICAgICBjb25zdCBmbiA9IGF3YWl0IGltcG9ydCgnLi9ub2RlY3J5cHRvLm1qcycpLnRoZW4oKG0pID0+IG0uc2lnbldpdGhBcGlLZXkpO1xuICAgICAgICByZXR1cm4gZm4oaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBOb2RlSlMgb3Igd2ViIGNyeXB0byBhdCBvdXIgZGlzcG9zYWwsIGRlZmF1bHQgdG8gcHVyZSBKUyBpbXBsZW1lbnRhdGlvblxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBjYXNlIGZvciBvbGQgYnJvd3NlcnMgYW5kIHJlYWN0IG5hdGl2ZSBlbnZpcm9ubWVudHNcbiAgICAgICAgY29uc3QgZm4gPSBhd2FpdCBpbXBvcnQoJy4vcHVyZWpzLm1qcycpLnRoZW4oKG0pID0+IG0uc2lnbldpdGhBcGlLZXkpO1xuICAgICAgICByZXR1cm4gZm4oaW5wdXQpO1xuICAgIH1cbn07XG4vKipcbiAqIFN0YW1wZXIgdG8gdXNlIHdpdGggYEB0dXJua2V5L2h0dHBgJ3MgYFR1cm5rZXlDbGllbnRgXG4gKi9cbmNsYXNzIEFwaUtleVN0YW1wZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLmFwaVB1YmxpY0tleSA9IGNvbmZpZy5hcGlQdWJsaWNLZXk7XG4gICAgICAgIHRoaXMuYXBpUHJpdmF0ZUtleSA9IGNvbmZpZy5hcGlQcml2YXRlS2V5O1xuICAgIH1cbiAgICBhc3luYyBzdGFtcChwYXlsb2FkKSB7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNpZ25XaXRoQXBpS2V5KHtcbiAgICAgICAgICAgIHB1YmxpY0tleTogdGhpcy5hcGlQdWJsaWNLZXksXG4gICAgICAgICAgICBwcml2YXRlS2V5OiB0aGlzLmFwaVByaXZhdGVLZXksXG4gICAgICAgICAgICBjb250ZW50OiBwYXlsb2FkLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3RhbXAgPSB7XG4gICAgICAgICAgICBwdWJsaWNLZXk6IHRoaXMuYXBpUHVibGljS2V5LFxuICAgICAgICAgICAgc2NoZW1lOiBcIlNJR05BVFVSRV9TQ0hFTUVfVEtfQVBJX1AyNTZcIixcbiAgICAgICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhbXBIZWFkZXJOYW1lOiBzdGFtcEhlYWRlck5hbWUsXG4gICAgICAgICAgICBzdGFtcEhlYWRlclZhbHVlOiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhKU09OLnN0cmluZ2lmeShzdGFtcCkpLFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQXBpS2V5U3RhbXBlciwgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n\n\n\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const privateKeyObject = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n        // @ts-expect-error -- the key can be a JWK object since Node v15.12.0\n        // https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey\n        key: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.convertTurnkeyApiKeyToJwk)({\n            uncompressedPrivateKeyHex: privateKey,\n            compressedPublicKeyHex: publicKey,\n        }),\n        format: \"jwk\",\n    });\n    const sign = crypto__WEBPACK_IMPORTED_MODULE_0__.createSign(\"SHA256\");\n    sign.write(Buffer.from(content));\n    sign.end();\n    return sign.sign(privateKeyObject, \"hex\");\n};\n\n\n//# sourceMappingURL=nodecrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvbm9kZWNyeXB0by5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ3VCOztBQUV4RDtBQUNBLFlBQVksaUNBQWlDO0FBQzdDLDZCQUE2QixvREFBdUI7QUFDcEQ7QUFDQTtBQUNBLGFBQWEscUVBQXlCO0FBQ3RDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLDhDQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac3BoZXJvaWQvY2xpZW50Ly4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHVybmtleSthcGkta2V5LXN0YW1wZXJAMC40LjEvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L25vZGVjcnlwdG8ubWpzPzVmMjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgeyBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5jb25zdCBzaWduV2l0aEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGVudCwgcHVibGljS2V5LCBwcml2YXRlS2V5IH0gPSBpbnB1dDtcbiAgICBjb25zdCBwcml2YXRlS2V5T2JqZWN0ID0gY3J5cHRvLmNyZWF0ZVByaXZhdGVLZXkoe1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0tIHRoZSBrZXkgY2FuIGJlIGEgSldLIG9iamVjdCBzaW5jZSBOb2RlIHYxNS4xMi4wXG4gICAgICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvY3J5cHRvLmh0bWwjY3J5cHRvY3JlYXRlcHJpdmF0ZWtleWtleVxuICAgICAgICBrZXk6IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2soe1xuICAgICAgICAgICAgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleDogcHJpdmF0ZUtleSxcbiAgICAgICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXg6IHB1YmxpY0tleSxcbiAgICAgICAgfSksXG4gICAgICAgIGZvcm1hdDogXCJqd2tcIixcbiAgICB9KTtcbiAgICBjb25zdCBzaWduID0gY3J5cHRvLmNyZWF0ZVNpZ24oXCJTSEEyNTZcIik7XG4gICAgc2lnbi53cml0ZShCdWZmZXIuZnJvbShjb250ZW50KSk7XG4gICAgc2lnbi5lbmQoKTtcbiAgICByZXR1cm4gc2lnbi5zaWduKHByaXZhdGVLZXlPYmplY3QsIFwiaGV4XCIpO1xufTtcblxuZXhwb3J0IHsgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGVjcnlwdG8ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/p256 */ \"(ssr)/../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha256-uint8array */ \"(ssr)/../../node_modules/.pnpm/sha256-uint8array@0.10.7/node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n\nconst signWithApiKey = async (input) => {\n    const publicKey = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.getPublicKey(input.privateKey, true);\n    // Public key in the usual 02 or 03 + 64 hex digits\n    const publicKeyString = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(publicKey);\n    if (publicKeyString != input.publicKey) {\n        throw new Error(`Bad API key. Expected to get public key ${input.publicKey}, got ${publicKeyString}`);\n    }\n    const hash = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__.createHash)().update(input.content).digest();\n    const signature = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.sign(hash, input.privateKey);\n    return signature.toDERHex();\n};\n\n\n//# sourceMappingURL=purejs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvcHVyZWpzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ0s7QUFDVzs7QUFFMUQ7QUFDQSxzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQSw0QkFBNEIsd0VBQXFCO0FBQ2pEO0FBQ0EsbUVBQW1FLGdCQUFnQixRQUFRLGdCQUFnQjtBQUMzRztBQUNBLGlCQUFpQiw2REFBVTtBQUMzQixzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac3BoZXJvaWQvY2xpZW50Ly4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHVybmtleSthcGkta2V5LXN0YW1wZXJAMC40LjEvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3B1cmVqcy5tanM/MTQ3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwMjU2IH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9wMjU2JztcbmltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdzaGEyNTYtdWludDhhcnJheSc7XG5pbXBvcnQgeyB1aW50OEFycmF5VG9IZXhTdHJpbmcgfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgY29uc3QgcHVibGljS2V5ID0gcDI1Ni5nZXRQdWJsaWNLZXkoaW5wdXQucHJpdmF0ZUtleSwgdHJ1ZSk7XG4gICAgLy8gUHVibGljIGtleSBpbiB0aGUgdXN1YWwgMDIgb3IgMDMgKyA2NCBoZXggZGlnaXRzXG4gICAgY29uc3QgcHVibGljS2V5U3RyaW5nID0gdWludDhBcnJheVRvSGV4U3RyaW5nKHB1YmxpY0tleSk7XG4gICAgaWYgKHB1YmxpY0tleVN0cmluZyAhPSBpbnB1dC5wdWJsaWNLZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgQVBJIGtleS4gRXhwZWN0ZWQgdG8gZ2V0IHB1YmxpYyBrZXkgJHtpbnB1dC5wdWJsaWNLZXl9LCBnb3QgJHtwdWJsaWNLZXlTdHJpbmd9YCk7XG4gICAgfVxuICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVIYXNoKCkudXBkYXRlKGlucHV0LmNvbnRlbnQpLmRpZ2VzdCgpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IHAyNTYuc2lnbihoYXNoLCBpbnB1dC5wcml2YXRlS2V5KTtcbiAgICByZXR1cm4gc2lnbmF0dXJlLnRvREVSSGV4KCk7XG59O1xuXG5leHBvcnQgeyBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVyZWpzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toByteString: () => (/* binding */ toByteString),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/bytes.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Converts the hex string to a byte array.\n *\n * @param hex the input\n * @return the byte array output\n * @throws {!Error}\n * @static\n */\nfunction fromHex(hex) {\n    if (hex.length % 2 != 0) {\n        throw new Error(\"Hex string length must be multiple of 2\");\n    }\n    const arr = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < hex.length; i += 2) {\n        arr[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n    }\n    return arr;\n}\n/**\n * Converts a byte array to hex.\n *\n * @param bytes the byte array input\n * @return hex the output\n * @static\n */\nfunction toHex(bytes) {\n    let result = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        const hexByte = bytes[i].toString(16);\n        result += hexByte.length > 1 ? hexByte : \"0\" + hexByte;\n    }\n    return result;\n}\n/**\n * Base64 encode a byte array.\n *\n * @param bytes the byte array input\n * @param opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs.\n * @return base64 output\n * @static\n */\nfunction toBase64(bytes, opt_webSafe) {\n    const encoded = btoa(\n    /* padding */\n    toByteString(bytes)).replace(/=/g, \"\");\n    if (opt_webSafe) {\n        return encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    }\n    return encoded;\n}\n/**\n * Turns a byte array into the string given by the concatenation of the\n * characters to which the numbers correspond. Each byte is corresponding to a\n * character. Does not support multi-byte characters.\n *\n * @param bytes Array of numbers representing\n *     characters.\n * @return Stringification of the array.\n */\nfunction toByteString(bytes) {\n    let str = \"\";\n    for (let i = 0; i < bytes.length; i += 1) {\n        str += String.fromCharCode(bytes[i]);\n    }\n    return str;\n}\n\n\n//# sourceMappingURL=bytes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdGluay9ieXRlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFa0Q7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac3BoZXJvaWQvY2xpZW50Ly4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHVybmtleSthcGkta2V5LXN0YW1wZXJAMC40LjEvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3RpbmsvYnl0ZXMubWpzP2M1ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90aW5rL2Jsb2IvNmY3NGI5OWEyYmZlNjY3N2UzNjcwNzk5MTE2YTU3MjY4ZmQwNjdmYS9qYXZhc2NyaXB0L3N1YnRsZS9ieXRlcy50c1xuICpcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG4vKipcbiAqIENvbnZlcnRzIHRoZSBoZXggc3RyaW5nIHRvIGEgYnl0ZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0gaGV4IHRoZSBpbnB1dFxuICogQHJldHVybiB0aGUgYnl0ZSBhcnJheSBvdXRwdXRcbiAqIEB0aHJvd3MgeyFFcnJvcn1cbiAqIEBzdGF0aWNcbiAqL1xuZnVuY3Rpb24gZnJvbUhleChoZXgpIHtcbiAgICBpZiAoaGV4Lmxlbmd0aCAlIDIgIT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIZXggc3RyaW5nIGxlbmd0aCBtdXN0IGJlIG11bHRpcGxlIG9mIDJcIik7XG4gICAgfVxuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGhleC5sZW5ndGggLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhleC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBhcnJbaSAvIDJdID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyhpLCBpICsgMiksIDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbi8qKlxuICogQ29udmVydHMgYSBieXRlIGFycmF5IHRvIGhleC5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgdGhlIGJ5dGUgYXJyYXkgaW5wdXRcbiAqIEByZXR1cm4gaGV4IHRoZSBvdXRwdXRcbiAqIEBzdGF0aWNcbiAqL1xuZnVuY3Rpb24gdG9IZXgoYnl0ZXMpIHtcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGhleEJ5dGUgPSBieXRlc1tpXS50b1N0cmluZygxNik7XG4gICAgICAgIHJlc3VsdCArPSBoZXhCeXRlLmxlbmd0aCA+IDEgPyBoZXhCeXRlIDogXCIwXCIgKyBoZXhCeXRlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBCYXNlNjQgZW5jb2RlIGEgYnl0ZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgdGhlIGJ5dGUgYXJyYXkgaW5wdXRcbiAqIEBwYXJhbSBvcHRfd2ViU2FmZSBUcnVlIGluZGljYXRlcyB3ZSBzaG91bGQgdXNlIHRoZSBhbHRlcm5hdGl2ZVxuICogICAgIGFscGhhYmV0LCB3aGljaCBkb2VzIG5vdCByZXF1aXJlIGVzY2FwaW5nIGZvciB1c2UgaW4gVVJMcy5cbiAqIEByZXR1cm4gYmFzZTY0IG91dHB1dFxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiB0b0Jhc2U2NChieXRlcywgb3B0X3dlYlNhZmUpIHtcbiAgICBjb25zdCBlbmNvZGVkID0gYnRvYShcbiAgICAvKiBwYWRkaW5nICovXG4gICAgdG9CeXRlU3RyaW5nKGJ5dGVzKSkucmVwbGFjZSgvPS9nLCBcIlwiKTtcbiAgICBpZiAob3B0X3dlYlNhZmUpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZWQucmVwbGFjZSgvXFwrL2csIFwiLVwiKS5yZXBsYWNlKC9cXC8vZywgXCJfXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlZDtcbn1cbi8qKlxuICogVHVybnMgYSBieXRlIGFycmF5IGludG8gdGhlIHN0cmluZyBnaXZlbiBieSB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aGVcbiAqIGNoYXJhY3RlcnMgdG8gd2hpY2ggdGhlIG51bWJlcnMgY29ycmVzcG9uZC4gRWFjaCBieXRlIGlzIGNvcnJlc3BvbmRpbmcgdG8gYVxuICogY2hhcmFjdGVyLiBEb2VzIG5vdCBzdXBwb3J0IG11bHRpLWJ5dGUgY2hhcmFjdGVycy5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgQXJyYXkgb2YgbnVtYmVycyByZXByZXNlbnRpbmdcbiAqICAgICBjaGFyYWN0ZXJzLlxuICogQHJldHVybiBTdHJpbmdpZmljYXRpb24gb2YgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiB0b0J5dGVTdHJpbmcoYnl0ZXMpIHtcbiAgICBsZXQgc3RyID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IHsgZnJvbUhleCwgdG9CYXNlNjQsIHRvQnl0ZVN0cmluZywgdG9IZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ5dGVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs":
/*!***********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pointDecode: () => (/* binding */ pointDecode)\n/* harmony export */ });\n/* harmony import */ var _bytes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\");\n\n\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts\n * - The implementation of integerToByteArray has been modified to augment the resulting byte array to a certain length.\n * - The implementation of PointDecode has been modified to decode both compressed and uncompressed points by checking for correct format\n * - Method isP256CurvePoint added to check whether an uncompressed point is valid\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * P-256 only\n */\nfunction getModulus() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"115792089210356248762697446949407573530086143415290314195533631308\" +\n        \"867097853951\");\n}\n/**\n * P-256 only\n */\nfunction getB() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\");\n}\n/** Converts byte array to bigint. */\nfunction byteArrayToInteger(bytes) {\n    return BigInt(\"0x\" + (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes));\n}\n/** Converts bigint to byte array. */\nfunction integerToByteArray(i, length) {\n    const input = i.toString(16);\n    const numHexChars = length * 2;\n    let padding = \"\";\n    if (numHexChars < input.length) {\n        throw new Error(`cannot pack integer with ${input.length} hex chars into ${length} bytes`);\n    }\n    else {\n        padding = \"0\".repeat(numHexChars - input.length);\n    }\n    return (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.fromHex)(padding + input);\n}\n/** Returns true iff the ith bit (in lsb order) of n is set. */\nfunction testBit(n, i) {\n    const m = BigInt(1) << BigInt(i);\n    return (n & m) !== BigInt(0);\n}\n/**\n * Computes a modular exponent.  Since JavaScript BigInt operations are not\n * constant-time, information about the inputs could leak.  Therefore, THIS\n * METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * @param b base\n * @param exp exponent\n * @param p modulus\n * @return b^exp modulo p\n */\nfunction modPow(b, exp, p) {\n    if (exp === BigInt(0)) {\n        return BigInt(1);\n    }\n    let result = b;\n    const exponentBitString = exp.toString(2);\n    for (let i = 1; i < exponentBitString.length; ++i) {\n        result = (result * result) % p;\n        if (exponentBitString[i] === \"1\") {\n            result = (result * b) % p;\n        }\n    }\n    return result;\n}\n/**\n * Computes a square root modulo an odd prime.  Since timing and exceptions can\n * leak information about the inputs, THIS METHOD SHOULD ONLY BE USED FOR\n * POINT DECOMPRESSION.\n *\n * @param x square\n * @param p prime modulus\n * @return square root of x modulo p\n */\nfunction modSqrt(x, p) {\n    if (p <= BigInt(0)) {\n        throw new Error(\"p must be positive\");\n    }\n    const base = x % p;\n    // The currently supported NIST curves P-256, P-384, and P-521 all satisfy\n    // p % 4 == 3.  However, although currently a no-op, the following check\n    // should be left in place in case other curves are supported in the future.\n    if (testBit(p, 0) && /* istanbul ignore next */ testBit(p, 1)) {\n        // Case p % 4 == 3 (applies to NIST curves P-256, P-384, and P-521)\n        // q = (p + 1) / 4\n        const q = (p + BigInt(1)) >> BigInt(2);\n        const squareRoot = modPow(base, q, p);\n        if ((squareRoot * squareRoot) % p !== base) {\n            throw new Error(\"could not find a modular square root\");\n        }\n        return squareRoot;\n    }\n    // Skipping other elliptic curve types that require Cipolla's algorithm.\n    throw new Error(\"unsupported modulus value\");\n}\n/**\n * Computes the y-coordinate of a point on an elliptic curve given its\n * x-coordinate.  Since timing and exceptions can leak information about the\n * inputs, THIS METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param lsb least significant bit of the y-coordinate\n * @return y-coordinate\n */\nfunction getY(x, lsb) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    let y = modSqrt(rhs, p);\n    if (lsb !== testBit(y, 0)) {\n        y = (p - y) % p;\n    }\n    return y;\n}\n/**\n *\n * Given x and y coordinates of a JWK, checks whether these are valid points on\n * the P-256 elliptic curve.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param y y-coordinate\n * @return boolean validity\n */\nfunction isP256CurvePoint(x, y) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    const lhs = y ** BigInt(2) % p;\n    return lhs === rhs;\n}\n/**\n * Decodes a public key in _compressed_ OR _uncompressed_ format.\n * Augmented to ensure that the x and y components are padded to fit 32 bytes.\n *\n * P-256 only\n */\nfunction pointDecode(point) {\n    const fieldSize = fieldSizeInBytes();\n    const compressedLength = fieldSize + 1;\n    const uncompressedLength = 2 * fieldSize + 1;\n    if (point.length !== compressedLength &&\n        point.length !== uncompressedLength) {\n        throw new Error(\"Invalid length: point is not in compressed or uncompressed format\");\n    }\n    // Decodes point if its length and first bit match the compressed format\n    if ((point[0] === 2 || point[0] === 3) && point.length == compressedLength) {\n        const lsb = point[0] === 3; // point[0] must be 2 (false) or 3 (true).\n        const x = byteArrayToInteger(point.subarray(1, point.length));\n        const p = getModulus();\n        if (x < BigInt(0) || x >= p) {\n            throw new Error(\"x is out of range\");\n        }\n        const y = getY(x, lsb);\n        const result = {\n            kty: \"EC\",\n            crv: \"P-256\",\n            x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x, 32), /* websafe */ true),\n            y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y, 32), /* websafe */ true),\n            ext: true,\n        };\n        return result;\n        // Decodes point if its length and first bit match the uncompressed format\n    }\n    else if (point[0] === 4 && point.length == uncompressedLength) {\n        const x = byteArrayToInteger(point.subarray(1, fieldSize + 1));\n        const y = byteArrayToInteger(point.subarray(fieldSize + 1, 2 * fieldSize + 1));\n        const p = getModulus();\n        if (x < BigInt(0) ||\n            x >= p ||\n            y < BigInt(0) ||\n            y >= p ||\n            !isP256CurvePoint(x, y)) {\n            throw new Error(\"invalid uncompressed x and y coordinates\");\n        }\n        const result = {\n            kty: \"EC\",\n            crv: \"P-256\",\n            x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x, 32), /* websafe */ true),\n            y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y, 32), /* websafe */ true),\n            ext: true,\n        };\n        return result;\n    }\n    throw new Error(\"invalid format\");\n}\n/**\n * P-256 only\n */\nfunction fieldSizeInBytes() {\n    return 32;\n}\n\n\n//# sourceMappingURL=elliptic_curves.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/utils.mjs":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/utils.mjs ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertTurnkeyApiKeyToJwk: () => (/* binding */ convertTurnkeyApiKeyToJwk)\n/* harmony export */ });\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\nfunction convertTurnkeyApiKeyToJwk(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__.pointDecode)((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayFromHexString)(compressedPublicKeyHex));\n    // Ensure that d is sufficiently padded\n    jwk.d = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.hexStringToBase64url)(uncompressedPrivateKeyHex, _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_JWK_MEMBER_BYTE_LENGTH);\n    return jwk;\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUN5RDs7QUFFbEg7QUFDQSxZQUFZLG9EQUFvRDtBQUNoRSxnQkFBZ0Isc0VBQVcsQ0FBQywwRUFBdUI7QUFDbkQ7QUFDQSxZQUFZLHVFQUFvQiw0QkFBNEIsNkVBQThCO0FBQzFGO0FBQ0E7O0FBRXFDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNwaGVyb2lkL2NsaWVudC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHR1cm5rZXkrYXBpLWtleS1zdGFtcGVyQDAuNC4xL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC91dGlscy5tanM/OTNjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwb2ludERlY29kZSB9IGZyb20gJy4vdGluay9lbGxpcHRpY19jdXJ2ZXMubWpzJztcbmltcG9ydCB7IHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nLCBoZXhTdHJpbmdUb0Jhc2U2NHVybCwgREVGQVVMVF9KV0tfTUVNQkVSX0JZVEVfTEVOR1RIIH0gZnJvbSAnQHR1cm5rZXkvZW5jb2RpbmcnO1xuXG5mdW5jdGlvbiBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrKGlucHV0KSB7XG4gICAgY29uc3QgeyB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4LCBjb21wcmVzc2VkUHVibGljS2V5SGV4IH0gPSBpbnB1dDtcbiAgICBjb25zdCBqd2sgPSBwb2ludERlY29kZSh1aW50OEFycmF5RnJvbUhleFN0cmluZyhjb21wcmVzc2VkUHVibGljS2V5SGV4KSk7XG4gICAgLy8gRW5zdXJlIHRoYXQgZCBpcyBzdWZmaWNpZW50bHkgcGFkZGVkXG4gICAgandrLmQgPSBoZXhTdHJpbmdUb0Jhc2U2NHVybCh1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4LCBERUZBVUxUX0pXS19NRU1CRVJfQllURV9MRU5HVEgpO1xuICAgIHJldHVybiBqd2s7XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2sgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const key = await importTurnkeyApiKey({\n        uncompressedPrivateKeyHex: privateKey,\n        compressedPublicKeyHex: publicKey,\n    });\n    return await signMessage({ key, content });\n};\nasync function importTurnkeyApiKey(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.convertTurnkeyApiKeyToJwk)({\n        uncompressedPrivateKeyHex,\n        compressedPublicKeyHex,\n    });\n    return await crypto.subtle.importKey(\"jwk\", jwk, {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n    }, false, // not extractable\n    [\"sign\"] // allow signing\n    );\n}\nasync function signMessage(input) {\n    const { key, content } = input;\n    const signatureIeee1363 = await crypto.subtle.sign({\n        name: \"ECDSA\",\n        hash: \"SHA-256\",\n    }, key, new TextEncoder().encode(content));\n    const signatureDer = convertEcdsaIeee1363ToDer(new Uint8Array(signatureIeee1363));\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(signatureDer);\n}\n/**\n * `SubtleCrypto.sign(...)` outputs signature in IEEE P1363 format:\n * - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\n *\n * Turnkey expects the signature encoding to be DER-encoded ASN.1:\n * - https://github.com/tkhq/tkcli/blob/7f0159af5a73387ff050647180d1db4d3a3aa033/src/internal/apikey/apikey.go#L149\n *\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L114\n *\n * Transform an ECDSA signature in IEEE 1363 encoding to DER encoding.\n *\n * @param ieee the ECDSA signature in IEEE encoding\n * @return ECDSA signature in DER encoding\n */\nfunction convertEcdsaIeee1363ToDer(ieee) {\n    if (ieee.length % 2 != 0 || ieee.length == 0 || ieee.length > 132) {\n        throw new Error(\"Invalid IEEE P1363 signature encoding. Length: \" + ieee.length);\n    }\n    const r = toUnsignedBigNum(ieee.subarray(0, ieee.length / 2));\n    const s = toUnsignedBigNum(ieee.subarray(ieee.length / 2, ieee.length));\n    let offset = 0;\n    const length = 1 + 1 + r.length + 1 + 1 + s.length;\n    let der;\n    if (length >= 128) {\n        der = new Uint8Array(length + 3);\n        der[offset++] = 48;\n        der[offset++] = 128 + 1;\n        der[offset++] = length;\n    }\n    else {\n        der = new Uint8Array(length + 2);\n        der[offset++] = 48;\n        der[offset++] = length;\n    }\n    der[offset++] = 2;\n    der[offset++] = r.length;\n    der.set(r, offset);\n    offset += r.length;\n    der[offset++] = 2;\n    der[offset++] = s.length;\n    der.set(s, offset);\n    return der;\n}\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L311\n *\n * Transform a big integer in big endian to minimal unsigned form which has\n * no extra zero at the beginning except when the highest bit is set.\n */\nfunction toUnsignedBigNum(bytes) {\n    // Remove zero prefixes.\n    let start = 0;\n    while (start < bytes.length && bytes[start] == 0) {\n        start++;\n    }\n    if (start == bytes.length) {\n        start = bytes.length - 1;\n    }\n    let extraZero = 0;\n    // If the 1st bit is not zero, add 1 zero byte.\n    if ((bytes[start] & 128) == 128) {\n        // Add extra zero.\n        extraZero = 1;\n    }\n    const res = new Uint8Array(bytes.length - start + extraZero);\n    res.set(bytes.subarray(start), extraZero);\n    return res;\n}\n\n\n//# sourceMappingURL=webcrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvd2ViY3J5cHRvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDRTs7QUFFMUQ7QUFDQTtBQUNBLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0EsWUFBWSxvREFBb0Q7QUFDaEUsZ0JBQWdCLHFFQUF5QjtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXLHdFQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNwaGVyb2lkL2NsaWVudC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHR1cm5rZXkrYXBpLWtleS1zdGFtcGVyQDAuNC4xL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC93ZWJjcnlwdG8ubWpzPzgwMDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayB9IGZyb20gJy4vdXRpbHMubWpzJztcbmltcG9ydCB7IHVpbnQ4QXJyYXlUb0hleFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgY29uc3QgeyBjb250ZW50LCBwdWJsaWNLZXksIHByaXZhdGVLZXkgfSA9IGlucHV0O1xuICAgIGNvbnN0IGtleSA9IGF3YWl0IGltcG9ydFR1cm5rZXlBcGlLZXkoe1xuICAgICAgICB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4OiBwcml2YXRlS2V5LFxuICAgICAgICBjb21wcmVzc2VkUHVibGljS2V5SGV4OiBwdWJsaWNLZXksXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IHNpZ25NZXNzYWdlKHsga2V5LCBjb250ZW50IH0pO1xufTtcbmFzeW5jIGZ1bmN0aW9uIGltcG9ydFR1cm5rZXlBcGlLZXkoaW5wdXQpIHtcbiAgICBjb25zdCB7IHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsIGNvbXByZXNzZWRQdWJsaWNLZXlIZXggfSA9IGlucHV0O1xuICAgIGNvbnN0IGp3ayA9IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2soe1xuICAgICAgICB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4LFxuICAgICAgICBjb21wcmVzc2VkUHVibGljS2V5SGV4LFxuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcImp3a1wiLCBqd2ssIHtcbiAgICAgICAgbmFtZTogXCJFQ0RTQVwiLFxuICAgICAgICBuYW1lZEN1cnZlOiBcIlAtMjU2XCIsXG4gICAgfSwgZmFsc2UsIC8vIG5vdCBleHRyYWN0YWJsZVxuICAgIFtcInNpZ25cIl0gLy8gYWxsb3cgc2lnbmluZ1xuICAgICk7XG59XG5hc3luYyBmdW5jdGlvbiBzaWduTWVzc2FnZShpbnB1dCkge1xuICAgIGNvbnN0IHsga2V5LCBjb250ZW50IH0gPSBpbnB1dDtcbiAgICBjb25zdCBzaWduYXR1cmVJZWVlMTM2MyA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuc2lnbih7XG4gICAgICAgIG5hbWU6IFwiRUNEU0FcIixcbiAgICAgICAgaGFzaDogXCJTSEEtMjU2XCIsXG4gICAgfSwga2V5LCBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoY29udGVudCkpO1xuICAgIGNvbnN0IHNpZ25hdHVyZURlciA9IGNvbnZlcnRFY2RzYUllZWUxMzYzVG9EZXIobmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlSWVlZTEzNjMpKTtcbiAgICByZXR1cm4gdWludDhBcnJheVRvSGV4U3RyaW5nKHNpZ25hdHVyZURlcik7XG59XG4vKipcbiAqIGBTdWJ0bGVDcnlwdG8uc2lnbiguLi4pYCBvdXRwdXRzIHNpZ25hdHVyZSBpbiBJRUVFIFAxMzYzIGZvcm1hdDpcbiAqIC0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1N1YnRsZUNyeXB0by9zaWduI2VjZHNhXG4gKlxuICogVHVybmtleSBleHBlY3RzIHRoZSBzaWduYXR1cmUgZW5jb2RpbmcgdG8gYmUgREVSLWVuY29kZWQgQVNOLjE6XG4gKiAtIGh0dHBzOi8vZ2l0aHViLmNvbS90a2hxL3RrY2xpL2Jsb2IvN2YwMTU5YWY1YTczMzg3ZmYwNTA2NDcxODBkMWRiNGQzYTNhYTAzMy9zcmMvaW50ZXJuYWwvYXBpa2V5L2FwaWtleS5nbyNMMTQ5XG4gKlxuICogQ29kZSBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvdGluay9ibG9iLzZmNzRiOTlhMmJmZTY2NzdlMzY3MDc5OTExNmE1NzI2OGZkMDY3ZmEvamF2YXNjcmlwdC9zdWJ0bGUvZWxsaXB0aWNfY3VydmVzLnRzI0wxMTRcbiAqXG4gKiBUcmFuc2Zvcm0gYW4gRUNEU0Egc2lnbmF0dXJlIGluIElFRUUgMTM2MyBlbmNvZGluZyB0byBERVIgZW5jb2RpbmcuXG4gKlxuICogQHBhcmFtIGllZWUgdGhlIEVDRFNBIHNpZ25hdHVyZSBpbiBJRUVFIGVuY29kaW5nXG4gKiBAcmV0dXJuIEVDRFNBIHNpZ25hdHVyZSBpbiBERVIgZW5jb2RpbmdcbiAqL1xuZnVuY3Rpb24gY29udmVydEVjZHNhSWVlZTEzNjNUb0RlcihpZWVlKSB7XG4gICAgaWYgKGllZWUubGVuZ3RoICUgMiAhPSAwIHx8IGllZWUubGVuZ3RoID09IDAgfHwgaWVlZS5sZW5ndGggPiAxMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBJRUVFIFAxMzYzIHNpZ25hdHVyZSBlbmNvZGluZy4gTGVuZ3RoOiBcIiArIGllZWUubGVuZ3RoKTtcbiAgICB9XG4gICAgY29uc3QgciA9IHRvVW5zaWduZWRCaWdOdW0oaWVlZS5zdWJhcnJheSgwLCBpZWVlLmxlbmd0aCAvIDIpKTtcbiAgICBjb25zdCBzID0gdG9VbnNpZ25lZEJpZ051bShpZWVlLnN1YmFycmF5KGllZWUubGVuZ3RoIC8gMiwgaWVlZS5sZW5ndGgpKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBjb25zdCBsZW5ndGggPSAxICsgMSArIHIubGVuZ3RoICsgMSArIDEgKyBzLmxlbmd0aDtcbiAgICBsZXQgZGVyO1xuICAgIGlmIChsZW5ndGggPj0gMTI4KSB7XG4gICAgICAgIGRlciA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCArIDMpO1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gNDg7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSAxMjggKyAxO1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gbGVuZ3RoO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGVyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoICsgMik7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSA0ODtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IGxlbmd0aDtcbiAgICB9XG4gICAgZGVyW29mZnNldCsrXSA9IDI7XG4gICAgZGVyW29mZnNldCsrXSA9IHIubGVuZ3RoO1xuICAgIGRlci5zZXQociwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gci5sZW5ndGg7XG4gICAgZGVyW29mZnNldCsrXSA9IDI7XG4gICAgZGVyW29mZnNldCsrXSA9IHMubGVuZ3RoO1xuICAgIGRlci5zZXQocywgb2Zmc2V0KTtcbiAgICByZXR1cm4gZGVyO1xufVxuLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90aW5rL2Jsb2IvNmY3NGI5OWEyYmZlNjY3N2UzNjcwNzk5MTE2YTU3MjY4ZmQwNjdmYS9qYXZhc2NyaXB0L3N1YnRsZS9lbGxpcHRpY19jdXJ2ZXMudHMjTDMxMVxuICpcbiAqIFRyYW5zZm9ybSBhIGJpZyBpbnRlZ2VyIGluIGJpZyBlbmRpYW4gdG8gbWluaW1hbCB1bnNpZ25lZCBmb3JtIHdoaWNoIGhhc1xuICogbm8gZXh0cmEgemVybyBhdCB0aGUgYmVnaW5uaW5nIGV4Y2VwdCB3aGVuIHRoZSBoaWdoZXN0IGJpdCBpcyBzZXQuXG4gKi9cbmZ1bmN0aW9uIHRvVW5zaWduZWRCaWdOdW0oYnl0ZXMpIHtcbiAgICAvLyBSZW1vdmUgemVybyBwcmVmaXhlcy5cbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIHdoaWxlIChzdGFydCA8IGJ5dGVzLmxlbmd0aCAmJiBieXRlc1tzdGFydF0gPT0gMCkge1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPT0gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgIHN0YXJ0ID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgbGV0IGV4dHJhWmVybyA9IDA7XG4gICAgLy8gSWYgdGhlIDFzdCBiaXQgaXMgbm90IHplcm8sIGFkZCAxIHplcm8gYnl0ZS5cbiAgICBpZiAoKGJ5dGVzW3N0YXJ0XSAmIDEyOCkgPT0gMTI4KSB7XG4gICAgICAgIC8vIEFkZCBleHRyYSB6ZXJvLlxuICAgICAgICBleHRyYVplcm8gPSAxO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShieXRlcy5sZW5ndGggLSBzdGFydCArIGV4dHJhWmVybyk7XG4gICAgcmVzLnNldChieXRlcy5zdWJhcnJheShzdGFydCksIGV4dHJhWmVybyk7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHsgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdlYmNyeXB0by5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\n");

/***/ })

};
;