"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey+encoding@0.2.1";
exports.ids = ["vendor-chunks/@turnkey+encoding@0.2.1"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_JWK_MEMBER_BYTE_LENGTH: () => (/* binding */ DEFAULT_JWK_MEMBER_BYTE_LENGTH),\n/* harmony export */   base64StringToBase64UrlEncodedString: () => (/* binding */ base64StringToBase64UrlEncodedString),\n/* harmony export */   hexStringToBase64url: () => (/* binding */ hexStringToBase64url),\n/* harmony export */   stringToBase64urlString: () => (/* binding */ stringToBase64urlString),\n/* harmony export */   uint8ArrayFromHexString: () => (/* binding */ uint8ArrayFromHexString),\n/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/github/webauthn-json/blob/e932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f/src/webauthn-json/base64url.ts#L23\n */\nconst DEFAULT_JWK_MEMBER_BYTE_LENGTH = 32;\nfunction stringToBase64urlString(input) {\n    // string to base64 -- we do not rely on the browser's btoa since it's not present in React Native environments\n    const base64String = btoa(input);\n    return base64StringToBase64UrlEncodedString(base64String);\n}\nfunction hexStringToBase64url(input, length) {\n    // Add an extra 0 to the start of the string to get a valid hex string (even length)\n    // (e.g. 0x0123 instead of 0x123)\n    const hexString = input.padStart(Math.ceil(input.length / 2) * 2, \"0\");\n    const buffer = uint8ArrayFromHexString(hexString, length);\n    return stringToBase64urlString(buffer.reduce((result, x) => result + String.fromCharCode(x), \"\"));\n}\nfunction base64StringToBase64UrlEncodedString(input) {\n    return input.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction uint8ArrayToHexString(input) {\n    return input.reduce((result, x) => result + x.toString(16).padStart(2, \"0\"), \"\");\n}\nconst uint8ArrayFromHexString = (hexString, length) => {\n    const hexRegex = /^[0-9A-Fa-f]+$/;\n    if (!hexString || hexString.length % 2 != 0 || !hexRegex.test(hexString)) {\n        throw new Error(`cannot create uint8array from invalid hex string: \"${hexString}\"`);\n    }\n    const buffer = new Uint8Array(hexString.match(/../g).map((h) => parseInt(h, 16)));\n    if (!length) {\n        return buffer;\n    }\n    if (hexString.length / 2 > length) {\n        throw new Error(\"hex value cannot fit in a buffer of \" + length + \" byte(s)\");\n    }\n    // If a length is specified, ensure we sufficiently pad\n    let paddedBuffer = new Uint8Array(length);\n    paddedBuffer.set(buffer, length - buffer.length);\n    return paddedBuffer;\n};\n// Pure JS implementation of btoa. This is adapted from the following:\n// https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/btoa.js\nfunction btoa(s) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    let i;\n    // String conversion as required by Web IDL.\n    s = `${s}`;\n    // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n    // data contains any character whose code point is greater than U+00FF.\"\n    for (i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) > 255) {\n            throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);\n        }\n    }\n    let out = \"\";\n    for (i = 0; i < s.length; i += 3) {\n        const groupsOfSix = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n        ];\n        groupsOfSix[0] = s.charCodeAt(i) >> 2;\n        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n        if (s.length > i + 1) {\n            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n        }\n        if (s.length > i + 2) {\n            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n        }\n        for (let j = 0; j < groupsOfSix.length; j++) {\n            if (typeof groupsOfSix[j] === \"undefined\") {\n                out += \"=\";\n            }\n            else {\n                out += btoaLookup(groupsOfSix[j]);\n            }\n        }\n    }\n    return out;\n}\nfunction btoaLookup(index) {\n    /**\n     * Lookup table for btoa(), which converts a six-bit number into the\n     * corresponding ASCII character.\n     */\n    const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    if (index >= 0 && index < 64) {\n        return keystr[index];\n    }\n    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n    return undefined;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2VuY29kaW5nQDAuMi4xL25vZGVfbW9kdWxlcy9AdHVybmtleS9lbmNvZGluZy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSxVQUFVO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QjtBQUNBLHdGQUF3RixpQkFBaUIsY0FBYyxFQUFFO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFK0s7QUFDL0siLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac3BoZXJvaWQvY2xpZW50Ly4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHVybmtleStlbmNvZGluZ0AwLjIuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvZW5jb2RpbmcvZGlzdC9pbmRleC5tanM/NTg5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ2l0aHViL3dlYmF1dGhuLWpzb24vYmxvYi9lOTMyYjM1ODVmYTcwYjBiZDViNWE0MDEyYmE3ZGJhZDdiMGEwZDBmL3NyYy93ZWJhdXRobi1qc29uL2Jhc2U2NHVybC50cyNMMjNcbiAqL1xuY29uc3QgREVGQVVMVF9KV0tfTUVNQkVSX0JZVEVfTEVOR1RIID0gMzI7XG5mdW5jdGlvbiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhpbnB1dCkge1xuICAgIC8vIHN0cmluZyB0byBiYXNlNjQgLS0gd2UgZG8gbm90IHJlbHkgb24gdGhlIGJyb3dzZXIncyBidG9hIHNpbmNlIGl0J3Mgbm90IHByZXNlbnQgaW4gUmVhY3QgTmF0aXZlIGVudmlyb25tZW50c1xuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2EoaW5wdXQpO1xuICAgIHJldHVybiBiYXNlNjRTdHJpbmdUb0Jhc2U2NFVybEVuY29kZWRTdHJpbmcoYmFzZTY0U3RyaW5nKTtcbn1cbmZ1bmN0aW9uIGhleFN0cmluZ1RvQmFzZTY0dXJsKGlucHV0LCBsZW5ndGgpIHtcbiAgICAvLyBBZGQgYW4gZXh0cmEgMCB0byB0aGUgc3RhcnQgb2YgdGhlIHN0cmluZyB0byBnZXQgYSB2YWxpZCBoZXggc3RyaW5nIChldmVuIGxlbmd0aClcbiAgICAvLyAoZS5nLiAweDAxMjMgaW5zdGVhZCBvZiAweDEyMylcbiAgICBjb25zdCBoZXhTdHJpbmcgPSBpbnB1dC5wYWRTdGFydChNYXRoLmNlaWwoaW5wdXQubGVuZ3RoIC8gMikgKiAyLCBcIjBcIik7XG4gICAgY29uc3QgYnVmZmVyID0gdWludDhBcnJheUZyb21IZXhTdHJpbmcoaGV4U3RyaW5nLCBsZW5ndGgpO1xuICAgIHJldHVybiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhidWZmZXIucmVkdWNlKChyZXN1bHQsIHgpID0+IHJlc3VsdCArIFN0cmluZy5mcm9tQ2hhckNvZGUoeCksIFwiXCIpKTtcbn1cbmZ1bmN0aW9uIGJhc2U2NFN0cmluZ1RvQmFzZTY0VXJsRW5jb2RlZFN0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIikucmVwbGFjZSgvPS9nLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIHVpbnQ4QXJyYXlUb0hleFN0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC5yZWR1Y2UoKHJlc3VsdCwgeCkgPT4gcmVzdWx0ICsgeC50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpLCBcIlwiKTtcbn1cbmNvbnN0IHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nID0gKGhleFN0cmluZywgbGVuZ3RoKSA9PiB7XG4gICAgY29uc3QgaGV4UmVnZXggPSAvXlswLTlBLUZhLWZdKyQvO1xuICAgIGlmICghaGV4U3RyaW5nIHx8IGhleFN0cmluZy5sZW5ndGggJSAyICE9IDAgfHwgIWhleFJlZ2V4LnRlc3QoaGV4U3RyaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBjcmVhdGUgdWludDhhcnJheSBmcm9tIGludmFsaWQgaGV4IHN0cmluZzogXCIke2hleFN0cmluZ31cImApO1xuICAgIH1cbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShoZXhTdHJpbmcubWF0Y2goLy4uL2cpLm1hcCgoaCkgPT4gcGFyc2VJbnQoaCwgMTYpKSk7XG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKGhleFN0cmluZy5sZW5ndGggLyAyID4gbGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImhleCB2YWx1ZSBjYW5ub3QgZml0IGluIGEgYnVmZmVyIG9mIFwiICsgbGVuZ3RoICsgXCIgYnl0ZShzKVwiKTtcbiAgICB9XG4gICAgLy8gSWYgYSBsZW5ndGggaXMgc3BlY2lmaWVkLCBlbnN1cmUgd2Ugc3VmZmljaWVudGx5IHBhZFxuICAgIGxldCBwYWRkZWRCdWZmZXIgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIHBhZGRlZEJ1ZmZlci5zZXQoYnVmZmVyLCBsZW5ndGggLSBidWZmZXIubGVuZ3RoKTtcbiAgICByZXR1cm4gcGFkZGVkQnVmZmVyO1xufTtcbi8vIFB1cmUgSlMgaW1wbGVtZW50YXRpb24gb2YgYnRvYS4gVGhpcyBpcyBhZGFwdGVkIGZyb20gdGhlIGZvbGxvd2luZzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qc2RvbS9hYmFiL2Jsb2IvODA4NzRhZTFmZTFjZGUyZTU4N2JiNmU1MWI2ZDdjOWI0MmNhMWQzNC9saWIvYnRvYS5qc1xuZnVuY3Rpb24gYnRvYShzKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIjEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgfVxuICAgIGxldCBpO1xuICAgIC8vIFN0cmluZyBjb252ZXJzaW9uIGFzIHJlcXVpcmVkIGJ5IFdlYiBJREwuXG4gICAgcyA9IGAke3N9YDtcbiAgICAvLyBcIlRoZSBidG9hKCkgbWV0aG9kIG11c3QgdGhyb3cgYW4gXCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3JcIiBET01FeGNlcHRpb24gaWZcbiAgICAvLyBkYXRhIGNvbnRhaW5zIGFueSBjaGFyYWN0ZXIgd2hvc2UgY29kZSBwb2ludCBpcyBncmVhdGVyIHRoYW4gVSswMEZGLlwiXG4gICAgZm9yIChpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHMuY2hhckNvZGVBdChpKSA+IDI1NSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkQ2hhcmFjdGVyRXJyb3I6IGZvdW5kIGNvZGUgcG9pbnQgZ3JlYXRlciB0aGFuIDI1NToke3MuY2hhckNvZGVBdChpKX0gYXQgcG9zaXRpb24gJHtpfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBvdXQgPSBcIlwiO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIGNvbnN0IGdyb3Vwc09mU2l4ID0gW1xuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBdO1xuICAgICAgICBncm91cHNPZlNpeFswXSA9IHMuY2hhckNvZGVBdChpKSA+PiAyO1xuICAgICAgICBncm91cHNPZlNpeFsxXSA9IChzLmNoYXJDb2RlQXQoaSkgJiAweDAzKSA8PCA0O1xuICAgICAgICBpZiAocy5sZW5ndGggPiBpICsgMSkge1xuICAgICAgICAgICAgZ3JvdXBzT2ZTaXhbMV0gfD0gcy5jaGFyQ29kZUF0KGkgKyAxKSA+PiA0O1xuICAgICAgICAgICAgZ3JvdXBzT2ZTaXhbMl0gPSAocy5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4MGYpIDw8IDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMubGVuZ3RoID4gaSArIDIpIHtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzJdIHw9IHMuY2hhckNvZGVBdChpICsgMikgPj4gNjtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzNdID0gcy5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4M2Y7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cHNPZlNpeC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBncm91cHNPZlNpeFtqXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIG91dCArPSBcIj1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dCArPSBidG9hTG9va3VwKGdyb3Vwc09mU2l4W2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gYnRvYUxvb2t1cChpbmRleCkge1xuICAgIC8qKlxuICAgICAqIExvb2t1cCB0YWJsZSBmb3IgYnRvYSgpLCB3aGljaCBjb252ZXJ0cyBhIHNpeC1iaXQgbnVtYmVyIGludG8gdGhlXG4gICAgICogY29ycmVzcG9uZGluZyBBU0NJSSBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgY29uc3Qga2V5c3RyID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCA2NCkge1xuICAgICAgICByZXR1cm4ga2V5c3RyW2luZGV4XTtcbiAgICB9XG4gICAgLy8gVGhyb3cgSU5WQUxJRF9DSEFSQUNURVJfRVJSIGV4Y2VwdGlvbiBoZXJlIC0tIHdvbid0IGJlIGhpdCBpbiB0aGUgdGVzdHMuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHsgREVGQVVMVF9KV0tfTUVNQkVSX0JZVEVfTEVOR1RILCBiYXNlNjRTdHJpbmdUb0Jhc2U2NFVybEVuY29kZWRTdHJpbmcsIGhleFN0cmluZ1RvQmFzZTY0dXJsLCBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZywgdWludDhBcnJheUZyb21IZXhTdHJpbmcsIHVpbnQ4QXJyYXlUb0hleFN0cmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs\n");

/***/ })

};
;